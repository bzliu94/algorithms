# numeric path is a base-three value; is at least 1 (base three)

# path length describes # of edges; is at least 0

from core.Util import *

from Label import *

class PathLabel(Label):

  def __init__(self, numeric_path, path_length):

    # improper_label = (numeric_path, path_length)

    proper_label_value = self._getProperLabelValue(numeric_path, path_length)

    self.numeric_path = numeric_path

    self.path_length = path_length

    Label.__init__(self, proper_label_value)

  # take an improper label value and determine corresponding proper label value

  # an improper label value is a (numeric_path, path_length) pair

  # takes O(log(d)) = O(log(b)) time, 
  #   where d is number of digits (base 3), 
  #   and b is number of bits

  # we note that log base 3 of n = c * log base 2 of n
  # in particular:
  #   log base 3 of n = log base 2 of n / log base 2 of 3
  #   => c = 1 / log base 2 of 3

  def _getProperLabelValue(self, numeric_path, path_length):

    # get length of numeric path in terms of base three digits, 
    #   excluding leading zeroes

    partial_base_three_str = PathLabel.toBaseThreeString(numeric_path)

    num_partial_base_three_str_digits = len(partial_base_three_str)

    num_leading_zeroes = path_length - num_partial_base_three_str_digits + 1

    leading_zeroes = [0] * num_leading_zeroes

    leading_zero_chars = [str(x) for x in leading_zeroes]

    leading_zero_str = PathLabel.concatenateChars(leading_zero_chars)

    extended_base_three_str = leading_zero_str + partial_base_three_str

    # print extended_base_three_str

    proper_label = PathLabel.toProperLabelValue(extended_base_three_str)

    return proper_label

  @staticmethod

  def concatenateChars(char_list):

    return PathLabel.concatenateCharsHelper(char_list)

  @staticmethod

  def concatenateCharsHelper(char_list):

    num_chars = len(char_list)

    if num_chars == 0:

      return ""

    else:

      curr_char = char_list[0]

      next_chars = char_list[1 : ]

      return curr_char + PathLabel.concatenateCharsHelper(next_chars)

  @staticmethod

  def toBaseTenValue(base_four_str):

    base_four_digit_char_list = list(base_four_str)

    value = PathLabel._toBaseTenValueHelper(base_four_digit_char_list, 0)

    return value

  @staticmethod

  def _toBaseTenValueHelper(partial_base_four_digit_char_list, curr_value):

    num_chars = len(partial_base_four_digit_char_list)

    if num_chars == 0:

      return curr_value

    else:

      curr_base_four_digit_char = partial_base_four_digit_char_list[0]

      curr_base_four_digit = int(curr_base_four_digit_char)

      return curr_value * 4 + curr_base_four_digit

  @staticmethod

  def toProperLabelValue(base_three_str):

    base_four_str = PathLabel._toProperLabelValueStr(base_three_str)

    proper_label = PathLabel.toBaseTenValue(base_four_str)

    return proper_label

  @staticmethod

  def _toProperLabelValueStr(base_three_str):

    base_three_digit_char_list = list(base_three_str)

    base_three_digit_list = [int(x) for x in base_three_digit_char_list]

    base_four_digit_list = PathLabel._toProperLabelValueStrHelper(base_three_digit_list)

    base_four_digit_char_list = [str(x) for x in base_four_digit_list]

    base_four_str = PathLabel.concatenateChars(base_four_digit_char_list)

    return base_four_str

  # retrieve a proper label for a provided list of base-three digits

  # we note that the output is a list of base-four digits

  @staticmethod

  def _toProperLabelValueStrHelper(partial_base_three_digit_list):

    num_digits = len(partial_base_three_digit_list)

    if num_digits == 0:

      return []

    else:

      curr_digit = partial_base_three_digit_list[0]

      next_digits = partial_base_three_digit_list[1 : ]

      if curr_digit == 0:

        return [1] + PathLabel._toProperLabelValueStrHelper(next_digits)

      elif curr_digit == 1:

        return [2] + PathLabel._toProperLabelValueStrHelper(next_digits)

      elif curr_digit == 2:

        return [3] + PathLabel._toProperLabelValueStrHelper(next_digits)

  # consider numeric comparison to take O(1) time

  def getValue(self):

    return Label.getValue(self)

  def getNumericPath(self):

    # return (self.value)[0]

    return self.numeric_path

  def getPathLength(self):

    # return (self.value)[1]

    return self.path_length

  def setNumericPath(self, numeric_path):

    # (self.value)[0] = numeric_path

    self.numeric_path = numeric_path

    path_length = self.getPathLength()

    proper_label_value = self._getProperLabelValue(self, numeric_path, path_length)

    self.setValue(proper_label_value)

  def setPathLength(self, path_length):

    # (self.value)[1] = path_length

    self.path_length = path_length

    numeric_path = self.getNumericPath()

    proper_label_value = self._getProperLabelValue(self, numeric_path, path_length)

    self.setValue(proper_label_value)

  """

  def compare(self, x):

    curr_numeric_path = self.getNumericPath()

    curr_path_length = self.getPathLength()

    numeric_path = x.getNumericPath()

    path_length = x.getPathLength()

    if curr_numeric_path < numeric_path:

      return -1

    elif curr_numeric_path > numeric_path:

      return 1

    elif curr_numeric_path == numeric_path:

      # resolve ties in terms of leading zeroes

      # the less leading zeroes, 
      #   the more to the right we are

      if curr_path_length < path_length:

        return 1

      elif curr_path_length == path_length:

        return 0

      elif curr_path_length > path_length:

        return -1

  """

  # assume that value is a non-negative integer

  # number has no leading zeroes

  @staticmethod

  def toBaseThreeString(value):

    return PathLabel._toBaseThreeStringHelper(value, "")

  @staticmethod

  def _toBaseThreeStringHelper(value, partial_str):

    if value == 0:

      return partial_str

    else:

      curr_digit = value % 3

      next_value = (value - value % 3) / 3

      next_partial_str = str(curr_digit) + partial_str

      return PathLabel._toBaseThreeStringHelper(next_value, next_partial_str)

"""

print PathLabel.toBaseThreeString(243)

print PathLabel.toBaseThreeString(729)

print PathLabel.toBaseThreeString(100)

"""

