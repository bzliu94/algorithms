# constrained version of a line

# has direction

from OrientedLine import *

class Ray:

  # valid parameter values are those greater than or equal to zero

  def __init__(self, base, direction):

    self.base = base

    self.direction = direction

    self.line = OrientedLine(base, direction)

  def getBase(self):

    return self.base

  def setBase(self, base):

    self.base = base

  def getDirection(self):

    return self.direction

  def setDirection(self, direction):

    self.direction = direction

  def doesIntersectWithRay(self, ray):

    # check that corresponding lines 
    # intersect at all

    # if an intersection exists 
    # for corresponding lines, 
    # retrieve that intersection

    # check that parameters 
    # that correspond 
    # to intersection for each 
    # of the two associated lines 
    # are positive

  def intersectWithRay(self, ray):

    # first determine if a valid intersection 
    # exists for the two rays

    # retrieve intersection 
    # for corresponding lines

    pass

ray = Ray((0, 0), (0, 1))

print ray.getBase()

print ray.getDirection()

