# a particular type of line

# abstract class

"""

# from OrientedLine import *

"""

class Bisector(Line):

  def __init__(self, point_a, point_b):

    pass

  def getPointA(self):

    return self.point_a

  def getPointB(self):

    return self.point_b

  def doesIntersectWithBisector(self, bisector):

    return self.doesIntersectWithLine(bisector)

  # can deal with bisectors that are vertical lines

  # as we are using vectors and have parameterized formulas for the lines

  def intersectWithBisector(self, bisector):

    return self.intersectWithLine(bisector)

  """

  def getParameterValue(self, point):

    pass

  """


