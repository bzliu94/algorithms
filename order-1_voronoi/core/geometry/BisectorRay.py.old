# constrained version of a particular type of line

# has direction

from Bisector import *

from Ray import *

# class BisectorRay(Ray, Bisector):

class BisectorRay(Ray):

  # valid parameter values are those greater than or equal to zero

  def __init__(self, site_a, site_b):

    bisector = OrientedBisector(site_a, site_b)

    self.bisector = bisector

    base = bisector.getOffsetVector()

    direction = bisector.getDirectionVector()

    Ray.__init__(self, base, direction)

  """

  def doesIntersectWithRay(self, ray):

    pass

  def intersectWithRay(self, ray):

    pass

  """

bisector_ray = BisectorRay((0, 0), (1, 0))

print bisector_ray.getBase()

print bisector_ray.getDirection()

