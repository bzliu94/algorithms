# points in direction 90 degrees counter-clockwise of line segment from point a to point b

# by default, our offset is midpoint of line segment from point a to point b

# our line is parameterized and parameter is based on a normalized direction vector

from OrientedLine import *

class Bisector(OrientedLine):

  def __init__(self, point_a, point_b):

    # print point_a, point_b

    """

    if point_a == point_b:

      raise Exception("points that we are determining a bisector for are identical")

    """

    # offset_vector = Bisector.getOffset(point_a, point_b)

    x = (point_a[0] + point_b[0]) / 2.0

    y = (point_a[1] + point_b[1]) / 2.0

    # note that division possibly leads to truncation

    # print x, y

    midpoint = (x, y)

    offset_vector = midpoint

    delta_x = point_b[0] - point_a[0]

    delta_y = point_b[1] - point_a[1]

    direction_vector = (delta_x, delta_y)

    # rotate vector ninety degrees in counter-clockwise direction

    bisector_direction_vector = (-1 * delta_y, delta_x)

    norm_bisector_direction_vector = OrientedLine.normalize(bisector_direction_vector)

    OrientedLine.__init__(self, offset_vector, norm_bisector_direction_vector)

    self.point_a = point_a

    self.point_b = point_b

  """

  @staticmethod

  def getOffset(point_a, point_b):

    line_segment = LineSegment(point_a, point_b)

    midpoint = line_segment.getMidpoint()

    return midpoint

  """

  def getPointA(self):

    return self.point_a

  def getPointB(self):

    return self.point_b

  def doesIntersectWithBisector(self, bisector):

    return self.doesIntersectWithLine(bisector)

  # can deal with bisectors that are vertical lines

  # as we are using vectors and have parameterized formulas for the lines

  def intersectWithBisector(self, bisector):

    return self.intersectWithLine(bisector)

  """

  def getParameterValue(self, point):

    pass

  """



# vertical line with x = 5

bisector1 = Bisector((0, 0), (10, 0))

# print bisector1.getPointA(), bisector1.getPointB()

# horizontal line with y = 0

bisector2 = Bisector((5, 10), (5, -10))

print bisector1.intersectWithBisector(bisector2)





# a vertical line with x = 78

bisector1 = Bisector((70, 100), (86, 100))

# a diagonal line pointing to upper left

bisector2 = Bisector((86, 100), (79, 93))

location = bisector1.intersectWithBisector(bisector2)

print location





bisector1 = Bisector((298, 366), (299, 366))

bisector2 = Bisector((299, 366), (307, 268))

location = bisector1.intersectWithBisector(bisector2)

print location





from ..Util import *

bisector1 = Bisector((242, 156), (314, 203))

bisector2 = Bisector((314, 203), (370, 203))

location = bisector1.intersectWithBisector(bisector2)

print location

site = (242, 156)

distance = getDistance(location, site)

print distance



